Description: >
  Marietta Ngwe Akumbom | Udacity Cloud DevOps Nanodegree
  Deploy a high-availability web app using CloudFormation
  Servers configuration for the deployment of Udagram 


Parameters:
  EnvironmentName:
    Description: Environment Name for Udagram. Will be used to prefix resources
    Type: String
  ImageId:
    Description: Instance image
    Type: String

  InstanceType:
      Description: 
          "The EC2 instance type"
      Type: String
      AllowedValues: [t2.micro, t2.medium, t3.small, t3.nano, t3.micro, t3.small]



Resources:

  BastionHostSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: allow ssh from our local
      GroupName: Bastion Host SG
      VpcId:
        Fn::ImportValue: !Sub ${EnvironmentName}-VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: "-1"
          FromPort: 0
          ToPort: 65535
          CidrIp: 0.0.0.0/0

  WebServerSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: allow http to our host and ssh from our local
      GroupName: Web server SG
      VpcId:
        Fn::ImportValue: !Sub ${EnvironmentName}-VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 0
          ToPort: 65535
          CidrIp: 0.0.0.0/0

  LoadBalancerSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: allow http to our load balancer
      GroupName: Load balancer SG
      VpcId:
        Fn::ImportValue: !Sub ${EnvironmentName}-VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0

  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 15
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 10
      HealthyThresholdCount: 2
      Port: 80
      Protocol: HTTP
      UnhealthyThresholdCount: 6
      VpcId: 
        Fn::ImportValue: !Sub "${EnvironmentName}-VPC"

  BastionHost:
    Type: AWS::EC2::Instance
    Properties: 
      ImageId: !Ref ImageId
      InstanceType: !Ref InstanceType
      IamInstanceProfile: !ImportValue InstanceProfile
      NetworkInterfaces: 
        - AssociatePublicIpAddress: true
          DeviceIndex: "0"
          GroupSet: 
            - !Ref BastionHostSG
          SubnetId: 
            Fn::ImportValue: !Sub ${EnvironmentName}-PUB1

  LaunchConfiguration:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      ImageId: ami-00ddb0e5626798373
      InstanceType: !Ref InstanceType
      UserData: 
        Fn::Base64: !Sub |
          #!/bin/bash
          apt-get update -y
          apt-get install unzip awscli -y
          apt-get install apache2 -y
          systemctl start apache2.service
          cd /var/www/html
          aws s3 cp s3://udacity-cfn-bucket/index.zip .
          unzip -o index.zip
      IamInstanceProfile: !ImportValue InstanceProfile
      SecurityGroups:
      - !Ref WebServerSG
      BlockDeviceMappings:
        - DeviceName: /dev/sdk
          Ebs:
            VolumeSize: 10

  AutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier:
      - Fn::ImportValue: !Sub ${EnvironmentName}-PRIV1
      - Fn::ImportValue: !Sub ${EnvironmentName}-PRIV2
      MaxSize: "4"
      MinSize: "2"
      LaunchConfigurationName: !Ref LaunchConfiguration
      HealthCheckGracePeriod: 60
      HealthCheckType: ELB
      TargetGroupARNs: [!Ref TargetGroup]

  LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Subnets: 
      - Fn::ImportValue: !Sub ${EnvironmentName}-PUB1
      - Fn::ImportValue: !Sub ${EnvironmentName}-PUB2
      SecurityGroups:
        - !Ref LoadBalancerSG
      
  Listener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
      - Type: forward
        TargetGroupArn: !Ref TargetGroup
      LoadBalancerArn: !Ref LoadBalancer
      Port: 80
      Protocol: HTTP

  ListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
      - Type: forward
        TargetGroupArn: !Ref TargetGroup
      Conditions:
      - Field: path-pattern
        Values: [/]
      ListenerArn: !Ref Listener
      Priority: 1

Outputs:
  LoadBalancer:
    Description: reference to public url for load balancer
    Value: !Join ["", ["http://", !GetAtt LoadBalancer.DNSName]]
    Export:
      Name: LoadBalancerPublicAccess
  BastionHost:
    Description: reference to bastion host
    Value: !Ref BastionHost
    Export:
      Name: BastionHost