Description: >
  Marietta Ngwe Akumbom | Udacity Cloud DevOps Nanodegree
  Deploy a high-availability web app using CloudFormation
  Networking configuration for the deployment of Udagram 

Parameters:

  EnvironmentName:
    Description: Environment Name for Udagram project. Will be used to prefix resources
    Type: String
  VpcCidr:  
    Description: Cidr for VPC
    Type: String
  PRIV1Cidr:
    Description: Cidr for private subnet at AZ 1
    Type: String
  PRIV2Cidr:
    Description: Cidr for private subnet at AZ 2
    Type: String
  PUB1Cidr:
    Description: Cidr for public subnet at AZ 1
    Type: String
  PUB2Cidr:
    Description: Cidr for public subnet at AZ 2
    Type: String


Resources:


  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCidr
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-VPC

  IGW:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-IGW

  IGWAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref IGW

  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [0,  !GetAZs ]
      MapPublicIpOnLaunch: false
      CidrBlock: !Ref PRIV1Cidr
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-PRIV1

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [1,  !GetAZs ]
      MapPublicIpOnLaunch: false
      CidrBlock: !Ref PRIV2Cidr
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-PRIV2

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [0,  !GetAZs ]
      MapPublicIpOnLaunch: true
      CidrBlock: !Ref PUB1Cidr
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-PUB1

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [1,  !GetAZs ]
      MapPublicIpOnLaunch: true
      CidrBlock: !Ref PUB2Cidr
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-PUB2

  ElasticIP1:
    Type: AWS::EC2::EIP
    DependsOn: IGWAttachment
    Properties:
      Domain: vpc
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-EIP for PUB1

  ElasticIP2:
    Type: AWS::EC2::EIP
    DependsOn: IGWAttachment
    Properties:
      Domain: vpc
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-EIP for PUB2


  NATGateway1:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt ElasticIP1.AllocationId
      SubnetId: !Ref PublicSubnet1
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-Nat1


  NATGateway2:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt ElasticIP2.AllocationId
      SubnetId: !Ref PublicSubnet2
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-Nat2

  PrivateRouteTable1:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-Priv Route Table1

  PrivateRouteTable2:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-Priv Route Table2
          

  PublicRouteTable:
      Type: AWS::EC2::RouteTable
      Properties: 
          VpcId: !Ref VPC
          Tags: 
              - Key: Name 
                Value: !Sub ${EnvironmentName}-Public Route Table

  PrivateRouteTable1Association:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable1
      SubnetId: !Ref PrivateSubnet1

  PrivateRouteTable2Association:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable2
      SubnetId: !Ref PrivateSubnet2

  Public1RouteTable1Association:
      Type: AWS::EC2::SubnetRouteTableAssociation
      Properties:
          RouteTableId: !Ref PublicRouteTable
          SubnetId: !Ref PublicSubnet1

  Public1RouteTable2Association:
      Type: AWS::EC2::SubnetRouteTableAssociation
      Properties:
          RouteTableId: !Ref PublicRouteTable
          SubnetId: !Ref PublicSubnet2
        
  NAT1Route:
    DependsOn: NATGateway1
    Type: AWS::EC2::Route
    Properties:
        RouteTableId: !Ref PrivateRouteTable1
        DestinationCidrBlock: '0.0.0.0/0'
        NatGatewayId: !Ref NATGateway1
        
  NAT2Route:
    DependsOn: NATGateway2
    Type: AWS::EC2::Route
    Properties:
        RouteTableId: !Ref PrivateRouteTable2
        DestinationCidrBlock: '0.0.0.0/0'
        NatGatewayId: !Ref NATGateway2

  DefaultPublicRoute: 
      Type: AWS::EC2::Route
      DependsOn: IGWAttachment
      Properties: 
          RouteTableId: !Ref PublicRouteTable
          DestinationCidrBlock: 0.0.0.0/0
          GatewayId: !Ref IGW



Outputs:
  VPC:
    Description: refrencing  VPC
    Value: !Ref VPC
    Export:
      Name: !Sub ${EnvironmentName}-VPC
  PrivateSubnet1:
    Description: referencing private subnet 1
    Value: !Ref PrivateSubnet1
    Export:
      Name: !Sub ${EnvironmentName}-PRIV1
  PrivateSubnet2:
    Description: referencing private subnet 2
    Value: !Ref PrivateSubnet2
    Export:
      Name: !Sub ${EnvironmentName}-PRIV2
  PublicSubnet1:
    Description: referencing public subnet 1
    Value: !Ref PublicSubnet1
    Export:
      Name: !Sub ${EnvironmentName}-PUB1
  PublicSubnet2:
    Description: referencing public subnet 2
    Value: !Ref PublicSubnet2
    Export:
      Name: !Sub ${EnvironmentName}-PUB2
  
